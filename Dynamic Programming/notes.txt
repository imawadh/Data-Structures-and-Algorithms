Phase 1 :
    What is Dynamic Programming ? 
        Advanced/ Optimised Recursion 
        Recursion --  Recursion is nothing but solving the bigger problems with sub Problems... 
        DP --> Solve the isue of Overlapping Sub Problems ... 

        Leetcode 509 --> Fibonacci Number ==> Fibonacci.cpp --> Done using Bottom Up Dp 
            It can also be done using 
        Leetcode 746 --> Min Cost Climbing Stairs ==> minCostRecursive.cpp --> Think in term of tabulation DP 
        Leetcode 62 ---> Unique Path
        Leetcode 63 ---> Unique path with obstarucle 
        Leetcode 1137 --> Nth tribinacci Number

        // > means is better than
                0(log n) > 0(sqrt(n)) > 0(n) > 0(n * log n) > 0(n^2) > 0(n^3) >>> 0(2^n)

Phase 2 :
    State of Dp --> It is the set of parameters using which we identify the sub problem Uniquely.
    How to identify state of the dp ?
        total number of Unique problem 
        if 1 variable ==> 1 Dimensional DP
        if 2 Varibale ==> 2 Dimensional DP
        if 3 variable ==> 3  Dimensional DP 

        Leetcode 198 ---> House Robbers 
        Leetcode 2139 ---> Minimum Moves to reach the target Score 
        



