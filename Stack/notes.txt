What is Stack ?  ----->  FILO / LIFO {First In Last Out}
Operations on Stack 
    1. push(element) : void                                       
    2. top()/peek()  : dataType of Stack
    3. pop()         : void (Delete the top element of ths stack)
    4. size()        : int() {Return the size of stack}

Time Complexity and Space Complexity 
    Insertion : 0(1) of top and 0(n) for any other position in stack
    Deletion  : 0(1) of top and 0(n) of other elements in the stack
    get       : 0(1) of top and 0(n) of other elements in the stack



Phase 1 ::: 
    teestStackSTL.cpp
    Print stack element in reverse order  ---> Use two stack 
    Copy Stack
    Push at bottom / any index in stack
    Reverse Stack ---> Using two extra stack // Using an extra array
    https://www.geeksforgeeks.org/problems/reverse-a-stack/1
    Stack Overlow 
    Stack UnderFlow  --> pop() || top() if stack is empty
    Stack Implementation 
        Using array/vector  -- stackImplemenationUsingArray.cpp
        Using Linked List   -- stackImplemenationUsingLinkedList.cpp

Phase 2 ::: 
    LeetCode 20  -> Valid Parenthesis 
    LeetCode 1047 -> Remove Consecutive Duplicates in string 
    LeetCode 496 -> Next Greater Element {Done}
    LeetCode 503 -> Next Greater Element 2 -> Pop Ans ans Push Terminology 
    LeetCode 556 -> Next Greater Element 3 {Not Done}
    Prevoius Greater Element 
    Prevoius Smaller Element
    LeetCode 901 -> Online Stock Span  { Think of Prevoius Greater Element and pair }
    LeetCode 84 ->  LargestReactangleInTheHistogram.cpp {Redo On LeetCode as well..}


Phase 3 :::
    Leetcode 1944 --> Number of visisble people 
    LeetCode 329 -->  Sliding Window maximum
    Leetcode 155 --> Implement Min stack

Phase 4 :::
    Prefix, PostFix and Infix 
    
        Infix Expression --> Human Readable expression => 2 + 2
        PostFix Expression --> Operators are in the back => 2 2 +
        PreFix Expression --> Operators are in the front => + 2 2
        Solve Innfix without ()
        Solve Innfix with ()













